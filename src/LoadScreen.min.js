// //First create and append a webgl renderer, then :
// const ls = new LoadScreen( renderer ).onComplete( init ).start( ASSETS );
 
// function init () {
//     const ASSETS = {
//         textures: {
//             foliageMap: {
//                 path: 'path/to/pic1.png', fileSize: 1467,
//                 minFilter: THREE.LinearFilter
//             },
//             foliageAO: { 
//                 path: 'path/to/pic2.png', fileSize: 1275 
//             }
//         },
//         geometries: {
//             shape: {
//                 path: 'path/to/model.json', fileSize: 3876,
//                 flatNormals: true,
//                 toBufferGeometry: true,
//                 onComplete ( geometry ) {
//                     geometry.addAttribute( 'uv2', geometry.attributes.uv )
//                 }
//             }
//         }, 
//         objects: {
//             tree: {
//                 geometry: 'shape',
//                 map: 'foliageMap',
//                 aoMap: 'foliageAO',
//                 material: new THREE.MeshStandardMaterial(),
//                 castShadow: true,
//                 transparent: true,
//                 onComplete ( object ) {
//                     object.scale.set( 1, 3, 1 );
//                 }
//             }
//         }
//     };
    
//     const style = {
//         type: 'linear-horizontal',//Main look. 'custom' empties the info container.
//         size: '170px',//Width of the central info container, in px or in %.
//         background: '#333',
//         progressContainerColor: '#000',
//         progressColor: '#333',
//         infoStyle: {//Text style : default values.
//             fontFamily: 'monospace',
//             color: '#666',
//             fontSize: '12px',
//             padding: '10px'
//         },
//         weight: '10',//Weight of the progress element (svg units).
//         sizeInfo: true,//Display size progress in MB.
//         progressInfo: true,//Display the progress element.
//         textInfo: [ 'Loading', 'Processing', 'Compiling', 'Creating scene' ]//Or false to remove.
//     };
     
//     const options = {
//         forcedStart: false,//Start loading even if the canvas is out of sight (usually bad practice).
//         verbose: false,//Logs progress, process and compile duration + total load screen duration.
//         tweenDuration: .5//Progress and removal tweens durations.
//     };
     
//     const ls = new LoadScreen( renderer, style );//Style is optional.
     
//     window.addEventListener( 'resize', () => { 
//         renderer.setSize( width, height ); 
//         ls.setSize( width, height ); 
//     });
     
//     ls.setOptions( options )
     
//     .onProgress( progress => { ... } )//Can be used to update a custom UI.
     
//     .onComplete( init )//After processing and compiling.
     
//     .start( ASSETS );//Load assets > process assets > compile materials > scene creation.
     
//     //or
//     .start();//Just add the info UI.
     
//     //Then for big script progress or just testing.
//     ls.setProgress( 0.5 );
     
//     //Finally at the end of the onComplete callback
//     ls.remove( animate );//Removal is tweened so next action is a callback.
// }

